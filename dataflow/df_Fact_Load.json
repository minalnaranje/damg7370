{
	"name": "df_Fact_Load",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "tsv_V2_pet_license_data",
						"type": "DatasetReference"
					},
					"name": "sourceStg"
				},
				{
					"dataset": {
						"referenceName": "ds_Location_Dim",
						"type": "DatasetReference"
					},
					"name": "sourceLocationDim"
				},
				{
					"dataset": {
						"referenceName": "DS_BREED_DIM",
						"type": "DatasetReference"
					},
					"name": "sourceBreedDim"
				},
				{
					"dataset": {
						"referenceName": "ds_Date_Dim",
						"type": "DatasetReference"
					},
					"name": "sourceDateDim"
				},
				{
					"dataset": {
						"referenceName": "ds_PET_LIC_FACT",
						"type": "DatasetReference"
					},
					"name": "factMaxID"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable6",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "joinLocationDim"
				},
				{
					"name": "joinBreedDim"
				},
				{
					"name": "joinDateDim"
				},
				{
					"name": "join1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DATE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceStg",
				"source(output(",
				"          LOCATION_SK as string,",
				"          LOCATION_NK as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          STATE_ABBR as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DATE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceLocationDim",
				"source(output(",
				"          BREED_SK as string,",
				"          BREED_NK as string,",
				"          START_DT as string,",
				"          END_DT as string,",
				"          IS_CURRENT as string,",
				"          BREED_DK as string,",
				"          SPECIES_NAME as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DATE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceBreedDim",
				"source(output(",
				"          DT as string,",
				"          ABRV_DAY_NAME as string,",
				"          MONTH_NAME as string,",
				"          START_DAY_OF_MONTH as string,",
				"          END_DAY_OF_MONTH as string,",
				"          QUARTER_NUM as string,",
				"          DAY_OF_WEEK as string,",
				"          IS_WEEKEND as string,",
				"          YEAR_NUM as string,",
				"          MONTH_NUM as string,",
				"          DAY_NUM as string,",
				"          DATE_DIM_SK as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDateDim",
				"source(output(",
				"          PET_LIC_SK as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT nvl(max(pet_lic_sk),0) AS pet_lic_sk FROM DAMG_SCHEMA.PET_LIC_FACT',",
				"     format: 'query') ~> factMaxID",
				"sourceStg, sourceLocationDim join(sourceStg@ZIP_CODE == sourceLocationDim@ZIP_CODE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinLocationDim",
				"joinLocationDim, sourceBreedDim join(SPECIES == SPECIES_NAME",
				"     && PRIMARY_BREED == PRIMARY_BREED_NAME",
				"     && SECONDARY_BREED == SECONDARY_BREED_NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinBreedDim",
				"joinBreedDim, sourceDateDim join(LICENSE_ISSUE_DATE == DT,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDateDim",
				"joinDateDim, factMaxID join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"select1 keyGenerate(output(SK_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"join1 select(mapColumn(",
				"          LICENSE_ISSUE_DATE,",
				"          LICENSE_NUMBER,",
				"          ANIMAL_NAME,",
				"          SPECIES,",
				"          PRIMARY_BREED,",
				"          SECONDARY_BREED,",
				"          ZIP_CODE = sourceStg@ZIP_CODE,",
				"          DI_JOB_ID = sourceStg@DI_JOB_ID,",
				"          DI_LOAD_DATE = sourceStg@DI_LOAD_DATE,",
				"          LOCATION_SK,",
				"          CITY,",
				"          STATE,",
				"          STATE_ABBR,",
				"          ZIP_CODE = sourceLocationDim@ZIP_CODE,",
				"          START_DT,",
				"          END_DT,",
				"          IS_CURRENT,",
				"          BREED_DK,",
				"          SPECIES_NAME,",
				"          PRIMARY_BREED_NAME,",
				"          SECONDARY_BREED_NAME,",
				"          DT,",
				"          ABRV_DAY_NAME,",
				"          MONTH_NAME,",
				"          START_DAY_OF_MONTH,",
				"          END_DAY_OF_MONTH,",
				"          QUARTER_NUM,",
				"          DAY_OF_WEEK,",
				"          IS_WEEKEND,",
				"          YEAR_NUM,",
				"          MONTH_NUM,",
				"          DAY_NUM,",
				"          DATE_DIM_SK,",
				"          PET_LIC_SK,",
				"          BREED_SK",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PET_LIC_SK as string,",
				"          DATE_SK as string,",
				"          BREED_SK as string,",
				"          LOCATION_SK as string,",
				"          DI_JOB_ID as string,",
				"          DI_CREATED_DT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     stageInsert: true,",
				"     mapColumn(",
				"          PET_LIC_SK,",
				"          DATE_SK = DATE_DIM_SK,",
				"          BREED_SK,",
				"          LOCATION_SK",
				"     )) ~> sink1"
			]
		}
	}
}